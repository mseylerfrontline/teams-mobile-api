// Generated by CoffeeScript 1.9.1
(function() {
  var DistrictModel, app, bodyParser, config, db, express, fs, http, mongoose, path, url, v1;

  http = require('http');

  path = require('path');

  url = require('url');

  fs = require('fs');

  config = require('./config/config.coffee');

  mongoose = require('mongoose');

  DistrictModel = require('./districtModel.coffee');

  db = mongoose.connection;

  mongoose.connect(config.mongoURL);

  express = require('express');

  bodyParser = require('body-parser');

  app = express();

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(bodyParser.json());

  app.all('*', function(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    return next();
  });

  v1 = express.Router();

  app.use('/mobile/v1', v1);

  v1.get('/districts', function(req, res) {
    var geoJSONpoint;
    if (req.query.longitude && req.query.latitude) {
      geoJSONpoint = {
        type: 'Point',
        coordinates: [req.query.longitude, req.query.latitude]
      };
      return DistrictModel.find({
        teams: true,
        loc: {
          $near: {
            $geometry: geoJSONpoint,
            $maxDistance: 1000
          }
        }
      }, "name altName accounts", function(err, data) {
        if (err) {
          return res.status(500).send({
            msg: 'An unexpected error occured.'
          });
        } else {
          return res.send({
            pageInfo: {
              totalResults: data.length,
              resultsPerPage: data.length
            },
            items: data
          });
        }
      });
    } else if (req.query.name) {
      return DistrictModel.find({
        teams: true,
        name: req.query.name
      }, "name altName accounts", function(err, data) {
        if (err) {
          return res.status(500).send({
            msg: 'An unexpected error occured.'
          });
        } else {
          return res.send({
            pageInfo: {
              totalResults: data.length,
              resultsPerPage: data.length
            },
            items: data
          });
        }
      });
    } else {
      return DistrictModel.find({
        teams: true
      }, "name altName accounts", {
        sort: {
          name: 1
        }
      }, function(err, data) {
        if (err) {
          return res.status(500).send({
            msg: 'An unexpected error occured.'
          });
        } else {
          return res.send({
            pageInfo: {
              totalResults: data.length,
              resultsPerPage: data.length
            },
            items: data
          });
        }
      });
    }
  });

  v1.put('/districts/', function(req, res) {});

  app.listen(config.port, config.ip);

}).call(this);
